#define ll long long int

class Solution {
public:
    const int mod = 1e9 + 7; // Modulus for large number calculations
    const ll N = 1e5; // Limit for prime numbers
    ll n; // Size of the nums array
    
    // Function to perform modular exponentiation
    ll modExp(ll base, ll exp) {
        if (exp == 0) return 1;
        ll half = modExp(base, exp / 2) % mod;
        half = (half * half) % mod;
        return (exp % 2 == 0) ? half : (base * half) % mod;
    }
    
    // Function to find all prime numbers up to N using Sieve of Eratosthenes
    vector<bool> findAllPrimes() {
        vector<bool> isPrime(N + 1, true);
        isPrime[0] = isPrime[1] = false;
        for (ll i = 2; i * i <= N; ++i) {
            if (isPrime[i]) {
                for (ll j = i * i; j <= N; j += i) {
                    isPrime[j] = false;
                }
            }
        }
        return isPrime;
    }
    
    // Function to count the number of distinct prime factors of a number
    ll countNumberOfPrimeFactors(ll num, const vector<bool> &primes) {
        ll count = 0;
        for (ll i = 1; i * i <= num; ++i) {
            if (num % i == 0) {
                if (primes[i]) ++count;
                if (i != num / i && primes[num / i]) ++count;
            }
        }
        return count;
    }
    
    // Function to find the index of the previous greater element for each element
    vector<ll> pge(const vector<ll> &arr) {
        vector<ll> left(n, -1);
        stack<ll> st;
        for (ll i = 0; i < n; ++i) {
            while (!st.empty() && arr[st.top()] < arr[i]) st.pop();
            if (!st.empty()) left[i] = st.top();
            st.push(i);
        }
        return left;
    }
    
    // Function to find the index of the next greater element for each element
    vector<ll> nge(const vector<ll> &arr) {
        vector<ll> right(n, n);
        stack<ll> st;
        for (ll i = n - 1; i >= 0; --i) {
            while (!st.empty() && arr[st.top()] <= arr[i]) st.pop();
            if (!st.empty()) right[i] = st.top();
            st.push(i);
        }
        return right;
    }
    
    // Function to calculate the number of subarrays where each element is the maximum
    vector<ll> findRanges(const vector<ll> &left, const vector<ll> &right) {
        vector<ll> ranges(n, 0);
        for (ll i = 0; i < n; ++i) {
            ranges[i] = (i - left[i]) * (right[i] - i);
        }
        return ranges;
    }
    
    // Function to calculate the maximum score by choosing the top k elements
    ll solve(const vector<int> &nums, const vector<ll> &left,const vector<ll> &right, ll k) {
        priority_queue<pair<ll, ll>> pq;
        for (ll i = 0; i < n; ++i) {
            pq.push({nums[i], i});
        }
        ll ans = 1;
        while (k > 0) {
            auto top = pq.top();
            pq.pop();
            ll value = top.first;
            ll index = top.second;
            ll range=(right[index]-index)*(index-left[index]);
            ll take = min(range, k);
            ans = (ans * modExp(value, take)) % mod;
            k -= take;
        }
        return ans;
    }
    
    // Main function to calculate the maximum score
    int maximumScore(vector<int>& nums, int k) {
        n = nums.size();
        vector<bool> primes = findAllPrimes();
        vector<ll> primefactors(n, 0);
        for (ll i = 0; i < n; ++i) {
            primefactors[i] = countNumberOfPrimeFactors(nums[i], primes);
        }
        vector<ll> left = pge(primefactors); // Use pge instead of findLeft
        vector<ll> right = nge(primefactors); // Use nge instead of findRight
        return solve(nums,left,right, k);
    }
};
